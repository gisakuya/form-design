// 查找点pt1到点pt2的“最优”路径
export function GetPath(rect1, pt1, rect2, pt2){
    const points1 = Get4Points(rect1);
    const points2 = Get4Points(rect2);

    let paths1 = [];
    let paths2 = [];
    let tmpRect = null;

    let i = 10; // 最大10次，防止无限循环
    while(i--){
        tmpRect = GetRect(pt1, pt2);
        let shortestPath = null;
        if(IsRectIntersect(tmpRect, rect2)){
            let candidates = [];
            let minPathLen = 999;
            points2.forEach(pt => {
                tmpRect = GetRect(pt1, pt);
                if(!IsRectIntersect(tmpRect, rect2)){
                    let paths = points2.getPaths(pt2, pt);
                    candidates.push({ pt: pt, rect: tmpRect, paths: paths, len: paths.length });
                    if(paths.length < minPathLen){
                        minPathLen = paths.length;
                    }
                }
            });
            let minPathCandidates = candidates.filter(x=>x.len == minPathLen);
            if(minPathCandidates.length == 0){
                // 找不到最短路径
                console.log('找不到最短路径');
            }
            else if(minPathCandidates.length == 1){
                // 找到一条最短路径
                shortestPath = minPathCandidates[0];
            }
            else {
                // 找到多条最短路径
                shortestPath = minPathCandidates[0];
                console.log('找到多条最短路径');
            }
        }
        else{
            shortestPath = { paths: [], rect: tmpRect, pt: pt2 };
        }

        if(shortestPath == null || IsRectIntersect(tmpRect, rect1)){
            if(paths1.includes(pt1)){
                // 重复添加了
                throw "无法找到最优路径";
            }
            paths1.push(pt1);
            pt1 = points1.getNextR(pt1);
        }
        else{
            paths2 = shortestPath.paths.reverse();
            tmpRect = shortestPath.rect;
            pt2 = shortestPath.pt;
            break;
        }
    }

    if(i == 0){
        throw "无法找到最优路径";
    }
    
    // 根据临时矩形，获取临时矩形上的9个点
    const tmpRectPoints = Get9Points(tmpRect);
    tmpRectPoints.forEach(pt=>{
        if(pt1.x == pt.x && pt1.y == pt.y){
            pt1 = pt;
        }
        if(pt2.x == pt.x && pt2.y == pt.y){
            pt2 = pt;
        }
    });

    // 搜索路径
    const searchPaths = SearchPath(pt1, pt2);

    // 计算路径权重
    let maxWeight = -999;
    searchPaths.forEach(path => {
        let weight = 0;
        let pt, npt, a, b, c;
        for (let i = 0; i < path.length-1; i++) {
            pt = path[i];
            npt = path[i+1];
            
            a = IsLineEdge(pt, npt, rect1) ? -2 : 0;
            b = IsLineEdge(pt, npt, rect2) ? -2 : 0;
            c = npt.isCenter ? 1 : 2;

            weight += a + b + c;

            // ---调试部分---
            if(DEBUG){
                pt.lineInRect1 = a;
                pt.lineInRect2 = b;
                pt.lineToCenter = c;
            }
            // ---------
        }

        // 保存当前路径权重
        path.weight = weight;

        // 记录最大权重
        if(weight > maxWeight){
            maxWeight = weight;
        }

        // ---调试部分---
        if(DEBUG){
            PrintPath(path, function(pt) { return `[${pt.lineToCenter},${pt.lineInRect1},${pt.lineInRect2}]` }, function(p){ return p.weight; });
        }
        // ---------
    });

    const maxWeightPaths = searchPaths.filter(x=>x.weight == maxWeight); //筛选
    const paths = [ ...paths1, ...maxWeightPaths[0], ...paths2 ]; // 合并路径

    // ---调试部分---
    if(DEBUG){
        PrintPath(paths);
        console.log("-----------我是分割线------------");
    }
    // ---------

    return paths;
}